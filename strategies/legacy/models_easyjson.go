// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package legacy

import (
	json "encoding/json"
	coral "github.com/coralproject/coral-importer/common/coral"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy(in *jlexer.Lexer, out *UserToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "active":
			out.Active = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy(out *jwriter.Writer, in UserToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Bool(bool(in.Active))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy(l, v)
}
func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy1(in *jlexer.Lexer, out *UserProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "provider":
			out.Provider = string(in.StringIntern())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy1(out *jwriter.Writer, in UserProfile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"provider\":"
		out.RawString(prefix)
		out.String(string(in.Provider))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy1(l, v)
}
func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy2(in *jlexer.Lexer, out *UserNotifications) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "settings":
			if in.IsNull() {
				in.Skip()
				out.Settings = nil
			} else {
				if out.Settings == nil {
					out.Settings = new(UserNotificationSettings)
				}
				(*out.Settings).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy2(out *jwriter.Writer, in UserNotifications) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"settings\":"
		out.RawString(prefix[1:])
		if in.Settings == nil {
			out.RawString("null")
		} else {
			(*in.Settings).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserNotifications) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserNotifications) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserNotifications) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserNotifications) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy2(l, v)
}
func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy3(in *jlexer.Lexer, out *UserNotificationSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "onFeatured":
			if in.IsNull() {
				in.Skip()
				out.OnFeatured = nil
			} else {
				if out.OnFeatured == nil {
					out.OnFeatured = new(bool)
				}
				*out.OnFeatured = bool(in.Bool())
			}
		case "onModeration":
			if in.IsNull() {
				in.Skip()
				out.OnModeration = nil
			} else {
				if out.OnModeration == nil {
					out.OnModeration = new(bool)
				}
				*out.OnModeration = bool(in.Bool())
			}
		case "onReply":
			if in.IsNull() {
				in.Skip()
				out.OnReply = nil
			} else {
				if out.OnReply == nil {
					out.OnReply = new(bool)
				}
				*out.OnReply = bool(in.Bool())
			}
		case "onStaffReply":
			if in.IsNull() {
				in.Skip()
				out.OnStaffReply = nil
			} else {
				if out.OnStaffReply == nil {
					out.OnStaffReply = new(bool)
				}
				*out.OnStaffReply = bool(in.Bool())
			}
		case "digestFrequency":
			if m, ok := out.DigestFrequency.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.DigestFrequency.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.DigestFrequency = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy3(out *jwriter.Writer, in UserNotificationSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"onFeatured\":"
		out.RawString(prefix[1:])
		if in.OnFeatured == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.OnFeatured))
		}
	}
	{
		const prefix string = ",\"onModeration\":"
		out.RawString(prefix)
		if in.OnModeration == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.OnModeration))
		}
	}
	{
		const prefix string = ",\"onReply\":"
		out.RawString(prefix)
		if in.OnReply == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.OnReply))
		}
	}
	{
		const prefix string = ",\"onStaffReply\":"
		out.RawString(prefix)
		if in.OnStaffReply == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.OnStaffReply))
		}
	}
	{
		const prefix string = ",\"digestFrequency\":"
		out.RawString(prefix)
		if m, ok := in.DigestFrequency.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.DigestFrequency.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.DigestFrequency))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserNotificationSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserNotificationSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserNotificationSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserNotificationSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy3(l, v)
}
func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy4(in *jlexer.Lexer, out *UserMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "notifications":
			if in.IsNull() {
				in.Skip()
				out.Notifications = nil
			} else {
				if out.Notifications == nil {
					out.Notifications = new(UserNotifications)
				}
				(*out.Notifications).UnmarshalEasyJSON(in)
			}
		case "lastAccountDownload":
			if in.IsNull() {
				in.Skip()
				out.LastAccountDownload = nil
			} else {
				if out.LastAccountDownload == nil {
					out.LastAccountDownload = new(coral.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LastAccountDownload).UnmarshalJSON(data))
				}
			}
		case "displayName":
			out.DisplayName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy4(out *jwriter.Writer, in UserMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"notifications\":"
		out.RawString(prefix[1:])
		if in.Notifications == nil {
			out.RawString("null")
		} else {
			(*in.Notifications).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"lastAccountDownload\":"
		out.RawString(prefix)
		if in.LastAccountDownload == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LastAccountDownload).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"displayName\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserMetadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserMetadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserMetadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserMetadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy4(l, v)
}
func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy5(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterCommonCoral(in, &out.MongoID)
		case "id":
			out.ID = string(in.String())
		case "username":
			out.Username = string(in.String())
		case "role":
			out.Role = string(in.StringIntern())
		case "password":
			out.Password = string(in.String())
		case "ignoresUsers":
			if in.IsNull() {
				in.Skip()
				out.IgnoredUsers = nil
			} else {
				in.Delim('[')
				if out.IgnoredUsers == nil {
					if !in.IsDelim(']') {
						out.IgnoredUsers = make([]string, 0, 4)
					} else {
						out.IgnoredUsers = []string{}
					}
				} else {
					out.IgnoredUsers = (out.IgnoredUsers)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.IgnoredUsers = append(out.IgnoredUsers, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "profiles":
			if in.IsNull() {
				in.Skip()
				out.Profiles = nil
			} else {
				in.Delim('[')
				if out.Profiles == nil {
					if !in.IsDelim(']') {
						out.Profiles = make([]UserProfile, 0, 2)
					} else {
						out.Profiles = []UserProfile{}
					}
				} else {
					out.Profiles = (out.Profiles)[:0]
				}
				for !in.IsDelim(']') {
					var v2 UserProfile
					(v2).UnmarshalEasyJSON(in)
					out.Profiles = append(out.Profiles, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tokens":
			if in.IsNull() {
				in.Skip()
				out.Tokens = nil
			} else {
				in.Delim('[')
				if out.Tokens == nil {
					if !in.IsDelim(']') {
						out.Tokens = make([]UserToken, 0, 1)
					} else {
						out.Tokens = []UserToken{}
					}
				} else {
					out.Tokens = (out.Tokens)[:0]
				}
				for !in.IsDelim(']') {
					var v3 UserToken
					(v3).UnmarshalEasyJSON(in)
					out.Tokens = append(out.Tokens, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			easyjsonD2b7633eDecode(in, &out.Status)
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(UserMetadata)
				}
				(*out.Metadata).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy5(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterCommonCoral(out, in.MongoID)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"role\":"
		out.RawString(prefix)
		out.String(string(in.Role))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"ignoresUsers\":"
		out.RawString(prefix)
		if in.IgnoredUsers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.IgnoredUsers {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"profiles\":"
		out.RawString(prefix)
		if in.Profiles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Profiles {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tokens\":"
		out.RawString(prefix)
		if in.Tokens == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Tokens {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncode(out, in.Status)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil {
			out.RawString("null")
		} else {
			(*in.Metadata).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy5(l, v)
}
func easyjsonD2b7633eDecode(in *jlexer.Lexer, out *struct {
	Username struct {
		Status  string `json:"status,intern"`
		History []struct {
			AssignedBy *string    `json:"assigned_by"`
			Status     string     `json:"status,intern"`
			CreatedAt  coral.Time `json:"created_at"`
		} `json:"history"`
	} `json:"username"`
	Banned struct {
		Status  bool `json:"status"`
		History []struct {
			AssignedBy *string    `json:"assigned_by"`
			Message    string     `json:"message"`
			Status     bool       `json:"status"`
			CreatedAt  coral.Time `json:"created_at"`
		} `json:"history"`
	} `json:"banned"`
	Suspension struct {
		Until   *coral.Time `json:"until"`
		History []struct {
			AssignedBy *string    `json:"assigned_by"`
			Message    string     `json:"message"`
			Until      coral.Time `json:"until"`
			CreatedAt  coral.Time `json:"created_at"`
		} `json:"history"`
	} `json:"suspension"`
	AlwaysPremod struct {
		Status  bool `json:"status"`
		History []struct {
			AssignedBy string     `json:"assigned_by"`
			Status     bool       `json:"status"`
			CreatedAt  coral.Time `json:"created_at"`
		} `json:"history"`
	} `json:"alwaysPremod"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "username":
			easyjsonD2b7633eDecode1(in, &out.Username)
		case "banned":
			easyjsonD2b7633eDecode2(in, &out.Banned)
		case "suspension":
			easyjsonD2b7633eDecode3(in, &out.Suspension)
		case "alwaysPremod":
			easyjsonD2b7633eDecode4(in, &out.AlwaysPremod)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode(out *jwriter.Writer, in struct {
	Username struct {
		Status  string `json:"status,intern"`
		History []struct {
			AssignedBy *string    `json:"assigned_by"`
			Status     string     `json:"status,intern"`
			CreatedAt  coral.Time `json:"created_at"`
		} `json:"history"`
	} `json:"username"`
	Banned struct {
		Status  bool `json:"status"`
		History []struct {
			AssignedBy *string    `json:"assigned_by"`
			Message    string     `json:"message"`
			Status     bool       `json:"status"`
			CreatedAt  coral.Time `json:"created_at"`
		} `json:"history"`
	} `json:"banned"`
	Suspension struct {
		Until   *coral.Time `json:"until"`
		History []struct {
			AssignedBy *string    `json:"assigned_by"`
			Message    string     `json:"message"`
			Until      coral.Time `json:"until"`
			CreatedAt  coral.Time `json:"created_at"`
		} `json:"history"`
	} `json:"suspension"`
	AlwaysPremod struct {
		Status  bool `json:"status"`
		History []struct {
			AssignedBy string     `json:"assigned_by"`
			Status     bool       `json:"status"`
			CreatedAt  coral.Time `json:"created_at"`
		} `json:"history"`
	} `json:"alwaysPremod"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix[1:])
		easyjsonD2b7633eEncode1(out, in.Username)
	}
	{
		const prefix string = ",\"banned\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncode2(out, in.Banned)
	}
	{
		const prefix string = ",\"suspension\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncode3(out, in.Suspension)
	}
	{
		const prefix string = ",\"alwaysPremod\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncode4(out, in.AlwaysPremod)
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode4(in *jlexer.Lexer, out *struct {
	Status  bool `json:"status"`
	History []struct {
		AssignedBy string     `json:"assigned_by"`
		Status     bool       `json:"status"`
		CreatedAt  coral.Time `json:"created_at"`
	} `json:"history"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]struct {
							AssignedBy string     `json:"assigned_by"`
							Status     bool       `json:"status"`
							CreatedAt  coral.Time `json:"created_at"`
						}, 0, 1)
					} else {
						out.History = []struct {
							AssignedBy string     `json:"assigned_by"`
							Status     bool       `json:"status"`
							CreatedAt  coral.Time `json:"created_at"`
						}{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v10 struct {
						AssignedBy string     `json:"assigned_by"`
						Status     bool       `json:"status"`
						CreatedAt  coral.Time `json:"created_at"`
					}
					easyjsonD2b7633eDecode5(in, &v10)
					out.History = append(out.History, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode4(out *jwriter.Writer, in struct {
	Status  bool `json:"status"`
	History []struct {
		AssignedBy string     `json:"assigned_by"`
		Status     bool       `json:"status"`
		CreatedAt  coral.Time `json:"created_at"`
	} `json:"history"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix)
		if in.History == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.History {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode5(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode5(in *jlexer.Lexer, out *struct {
	AssignedBy string     `json:"assigned_by"`
	Status     bool       `json:"status"`
	CreatedAt  coral.Time `json:"created_at"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "assigned_by":
			out.AssignedBy = string(in.String())
		case "status":
			out.Status = bool(in.Bool())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode5(out *jwriter.Writer, in struct {
	AssignedBy string     `json:"assigned_by"`
	Status     bool       `json:"status"`
	CreatedAt  coral.Time `json:"created_at"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"assigned_by\":"
		out.RawString(prefix[1:])
		out.String(string(in.AssignedBy))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode3(in *jlexer.Lexer, out *struct {
	Until   *coral.Time `json:"until"`
	History []struct {
		AssignedBy *string    `json:"assigned_by"`
		Message    string     `json:"message"`
		Until      coral.Time `json:"until"`
		CreatedAt  coral.Time `json:"created_at"`
	} `json:"history"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "until":
			if in.IsNull() {
				in.Skip()
				out.Until = nil
			} else {
				if out.Until == nil {
					out.Until = new(coral.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Until).UnmarshalJSON(data))
				}
			}
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]struct {
							AssignedBy *string    `json:"assigned_by"`
							Message    string     `json:"message"`
							Until      coral.Time `json:"until"`
							CreatedAt  coral.Time `json:"created_at"`
						}, 0, 0)
					} else {
						out.History = []struct {
							AssignedBy *string    `json:"assigned_by"`
							Message    string     `json:"message"`
							Until      coral.Time `json:"until"`
							CreatedAt  coral.Time `json:"created_at"`
						}{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v13 struct {
						AssignedBy *string    `json:"assigned_by"`
						Message    string     `json:"message"`
						Until      coral.Time `json:"until"`
						CreatedAt  coral.Time `json:"created_at"`
					}
					easyjsonD2b7633eDecode6(in, &v13)
					out.History = append(out.History, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode3(out *jwriter.Writer, in struct {
	Until   *coral.Time `json:"until"`
	History []struct {
		AssignedBy *string    `json:"assigned_by"`
		Message    string     `json:"message"`
		Until      coral.Time `json:"until"`
		CreatedAt  coral.Time `json:"created_at"`
	} `json:"history"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"until\":"
		out.RawString(prefix[1:])
		if in.Until == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Until).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix)
		if in.History == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.History {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode6(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode6(in *jlexer.Lexer, out *struct {
	AssignedBy *string    `json:"assigned_by"`
	Message    string     `json:"message"`
	Until      coral.Time `json:"until"`
	CreatedAt  coral.Time `json:"created_at"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "assigned_by":
			if in.IsNull() {
				in.Skip()
				out.AssignedBy = nil
			} else {
				if out.AssignedBy == nil {
					out.AssignedBy = new(string)
				}
				*out.AssignedBy = string(in.String())
			}
		case "message":
			out.Message = string(in.String())
		case "until":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Until).UnmarshalJSON(data))
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode6(out *jwriter.Writer, in struct {
	AssignedBy *string    `json:"assigned_by"`
	Message    string     `json:"message"`
	Until      coral.Time `json:"until"`
	CreatedAt  coral.Time `json:"created_at"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"assigned_by\":"
		out.RawString(prefix[1:])
		if in.AssignedBy == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AssignedBy))
		}
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"until\":"
		out.RawString(prefix)
		out.Raw((in.Until).MarshalJSON())
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode2(in *jlexer.Lexer, out *struct {
	Status  bool `json:"status"`
	History []struct {
		AssignedBy *string    `json:"assigned_by"`
		Message    string     `json:"message"`
		Status     bool       `json:"status"`
		CreatedAt  coral.Time `json:"created_at"`
	} `json:"history"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = bool(in.Bool())
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]struct {
							AssignedBy *string    `json:"assigned_by"`
							Message    string     `json:"message"`
							Status     bool       `json:"status"`
							CreatedAt  coral.Time `json:"created_at"`
						}, 0, 1)
					} else {
						out.History = []struct {
							AssignedBy *string    `json:"assigned_by"`
							Message    string     `json:"message"`
							Status     bool       `json:"status"`
							CreatedAt  coral.Time `json:"created_at"`
						}{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v16 struct {
						AssignedBy *string    `json:"assigned_by"`
						Message    string     `json:"message"`
						Status     bool       `json:"status"`
						CreatedAt  coral.Time `json:"created_at"`
					}
					easyjsonD2b7633eDecode7(in, &v16)
					out.History = append(out.History, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode2(out *jwriter.Writer, in struct {
	Status  bool `json:"status"`
	History []struct {
		AssignedBy *string    `json:"assigned_by"`
		Message    string     `json:"message"`
		Status     bool       `json:"status"`
		CreatedAt  coral.Time `json:"created_at"`
	} `json:"history"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix)
		if in.History == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.History {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode7(out, v18)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode7(in *jlexer.Lexer, out *struct {
	AssignedBy *string    `json:"assigned_by"`
	Message    string     `json:"message"`
	Status     bool       `json:"status"`
	CreatedAt  coral.Time `json:"created_at"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "assigned_by":
			if in.IsNull() {
				in.Skip()
				out.AssignedBy = nil
			} else {
				if out.AssignedBy == nil {
					out.AssignedBy = new(string)
				}
				*out.AssignedBy = string(in.String())
			}
		case "message":
			out.Message = string(in.String())
		case "status":
			out.Status = bool(in.Bool())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode7(out *jwriter.Writer, in struct {
	AssignedBy *string    `json:"assigned_by"`
	Message    string     `json:"message"`
	Status     bool       `json:"status"`
	CreatedAt  coral.Time `json:"created_at"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"assigned_by\":"
		out.RawString(prefix[1:])
		if in.AssignedBy == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AssignedBy))
		}
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Bool(bool(in.Status))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode1(in *jlexer.Lexer, out *struct {
	Status  string `json:"status,intern"`
	History []struct {
		AssignedBy *string    `json:"assigned_by"`
		Status     string     `json:"status,intern"`
		CreatedAt  coral.Time `json:"created_at"`
	} `json:"history"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.StringIntern())
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]struct {
							AssignedBy *string    `json:"assigned_by"`
							Status     string     `json:"status,intern"`
							CreatedAt  coral.Time `json:"created_at"`
						}, 0, 1)
					} else {
						out.History = []struct {
							AssignedBy *string    `json:"assigned_by"`
							Status     string     `json:"status,intern"`
							CreatedAt  coral.Time `json:"created_at"`
						}{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v19 struct {
						AssignedBy *string    `json:"assigned_by"`
						Status     string     `json:"status,intern"`
						CreatedAt  coral.Time `json:"created_at"`
					}
					easyjsonD2b7633eDecode8(in, &v19)
					out.History = append(out.History, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode1(out *jwriter.Writer, in struct {
	Status  string `json:"status,intern"`
	History []struct {
		AssignedBy *string    `json:"assigned_by"`
		Status     string     `json:"status,intern"`
		CreatedAt  coral.Time `json:"created_at"`
	} `json:"history"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"history\":"
		out.RawString(prefix)
		if in.History == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.History {
				if v20 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode8(out, v21)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode8(in *jlexer.Lexer, out *struct {
	AssignedBy *string    `json:"assigned_by"`
	Status     string     `json:"status,intern"`
	CreatedAt  coral.Time `json:"created_at"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "assigned_by":
			if in.IsNull() {
				in.Skip()
				out.AssignedBy = nil
			} else {
				if out.AssignedBy == nil {
					out.AssignedBy = new(string)
				}
				*out.AssignedBy = string(in.String())
			}
		case "status":
			out.Status = string(in.StringIntern())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode8(out *jwriter.Writer, in struct {
	AssignedBy *string    `json:"assigned_by"`
	Status     string     `json:"status,intern"`
	CreatedAt  coral.Time `json:"created_at"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"assigned_by\":"
		out.RawString(prefix[1:])
		if in.AssignedBy == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AssignedBy))
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterCommonCoral(in *jlexer.Lexer, out *coral.ObjectID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "$oid":
			out.OID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterCommonCoral(out *jwriter.Writer, in coral.ObjectID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"$oid\":"
		out.RawString(prefix[1:])
		out.String(string(in.OID))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy6(in *jlexer.Lexer, out *CommentTag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "assigned_by":
			if in.IsNull() {
				in.Skip()
				out.AssignedBy = nil
			} else {
				if out.AssignedBy == nil {
					out.AssignedBy = new(string)
				}
				*out.AssignedBy = string(in.String())
			}
		case "tag":
			easyjsonD2b7633eDecode9(in, &out.Tag)
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy6(out *jwriter.Writer, in CommentTag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"assigned_by\":"
		out.RawString(prefix[1:])
		if in.AssignedBy == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AssignedBy))
		}
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncode9(out, in.Tag)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentTag) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentTag) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentTag) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentTag) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy6(l, v)
}
func easyjsonD2b7633eDecode9(in *jlexer.Lexer, out *struct {
	Name string `json:"name,intern"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.StringIntern())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode9(out *jwriter.Writer, in struct {
	Name string `json:"name,intern"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy7(in *jlexer.Lexer, out *CommentBodyHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "body":
			out.Body = string(in.String())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy7(out *jwriter.Writer, in CommentBodyHistory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix[1:])
		out.String(string(in.Body))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentBodyHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentBodyHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentBodyHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentBodyHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy7(l, v)
}
func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy8(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterCommonCoral(in, &out.MongoID)
		case "id":
			out.ID = string(in.String())
		case "asset_id":
			out.AssetID = string(in.String())
		case "status":
			out.Status = string(in.StringIntern())
		case "status_history":
			if in.IsNull() {
				in.Skip()
				out.StatusHistory = nil
			} else {
				in.Delim('[')
				if out.StatusHistory == nil {
					if !in.IsDelim(']') {
						out.StatusHistory = make([]struct {
							AssignedBy *string    `json:"assigned_by"`
							Type       string     `json:"type,intern"`
							CreatedAt  coral.Time `json:"created_at"`
						}, 0, 1)
					} else {
						out.StatusHistory = []struct {
							AssignedBy *string    `json:"assigned_by"`
							Type       string     `json:"type,intern"`
							CreatedAt  coral.Time `json:"created_at"`
						}{}
					}
				} else {
					out.StatusHistory = (out.StatusHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v22 struct {
						AssignedBy *string    `json:"assigned_by"`
						Type       string     `json:"type,intern"`
						CreatedAt  coral.Time `json:"created_at"`
					}
					easyjsonD2b7633eDecode10(in, &v22)
					out.StatusHistory = append(out.StatusHistory, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new(struct {
						Perspective map[string]struct {
							SummaryScore float64 `json:"summaryScore"`
						} `json:"perspective"`
						Akismet *bool `json:"akismet"`
					})
				}
				easyjsonD2b7633eDecode11(in, out.Metadata)
			}
		case "body_history":
			if in.IsNull() {
				in.Skip()
				out.BodyHistory = nil
			} else {
				in.Delim('[')
				if out.BodyHistory == nil {
					if !in.IsDelim(']') {
						out.BodyHistory = make([]CommentBodyHistory, 0, 1)
					} else {
						out.BodyHistory = []CommentBodyHistory{}
					}
				} else {
					out.BodyHistory = (out.BodyHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v23 CommentBodyHistory
					(v23).UnmarshalEasyJSON(in)
					out.BodyHistory = append(out.BodyHistory, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]CommentTag, 0, 1)
					} else {
						out.Tags = []CommentTag{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v24 CommentTag
					(v24).UnmarshalEasyJSON(in)
					out.Tags = append(out.Tags, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parent_id":
			if in.IsNull() {
				in.Skip()
				out.ParentID = nil
			} else {
				if out.ParentID == nil {
					out.ParentID = new(string)
				}
				*out.ParentID = string(in.String())
			}
		case "author_id":
			out.AuthorID = string(in.String())
		case "deleted_at":
			if in.IsNull() {
				in.Skip()
				out.DeletedAt = nil
			} else {
				if out.DeletedAt == nil {
					out.DeletedAt = new(coral.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletedAt).UnmarshalJSON(data))
				}
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "updated_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.UpdatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy8(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterCommonCoral(out, in.MongoID)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"asset_id\":"
		out.RawString(prefix)
		out.String(string(in.AssetID))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"status_history\":"
		out.RawString(prefix)
		if in.StatusHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range in.StatusHistory {
				if v25 > 0 {
					out.RawByte(',')
				}
				easyjsonD2b7633eEncode10(out, v26)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil {
			out.RawString("null")
		} else {
			easyjsonD2b7633eEncode11(out, *in.Metadata)
		}
	}
	{
		const prefix string = ",\"body_history\":"
		out.RawString(prefix)
		if in.BodyHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.BodyHistory {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.Tags {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		if in.ParentID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ParentID))
		}
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.String(string(in.AuthorID))
	}
	{
		const prefix string = ",\"deleted_at\":"
		out.RawString(prefix)
		if in.DeletedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.DeletedAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"updated_at\":"
		out.RawString(prefix)
		out.Raw((in.UpdatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy8(l, v)
}
func easyjsonD2b7633eDecode11(in *jlexer.Lexer, out *struct {
	Perspective map[string]struct {
		SummaryScore float64 `json:"summaryScore"`
	} `json:"perspective"`
	Akismet *bool `json:"akismet"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "perspective":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Perspective = make(map[string]struct {
					SummaryScore float64 `json:"summaryScore"`
				})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v31 struct {
						SummaryScore float64 `json:"summaryScore"`
					}
					easyjsonD2b7633eDecode12(in, &v31)
					(out.Perspective)[key] = v31
					in.WantComma()
				}
				in.Delim('}')
			}
		case "akismet":
			if in.IsNull() {
				in.Skip()
				out.Akismet = nil
			} else {
				if out.Akismet == nil {
					out.Akismet = new(bool)
				}
				*out.Akismet = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode11(out *jwriter.Writer, in struct {
	Perspective map[string]struct {
		SummaryScore float64 `json:"summaryScore"`
	} `json:"perspective"`
	Akismet *bool `json:"akismet"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"perspective\":"
		out.RawString(prefix[1:])
		if in.Perspective == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v32First := true
			for v32Name, v32Value := range in.Perspective {
				if v32First {
					v32First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v32Name))
				out.RawByte(':')
				easyjsonD2b7633eEncode12(out, v32Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"akismet\":"
		out.RawString(prefix)
		if in.Akismet == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Akismet))
		}
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode12(in *jlexer.Lexer, out *struct {
	SummaryScore float64 `json:"summaryScore"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "summaryScore":
			out.SummaryScore = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode12(out *jwriter.Writer, in struct {
	SummaryScore float64 `json:"summaryScore"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"summaryScore\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.SummaryScore))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecode10(in *jlexer.Lexer, out *struct {
	AssignedBy *string    `json:"assigned_by"`
	Type       string     `json:"type,intern"`
	CreatedAt  coral.Time `json:"created_at"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "assigned_by":
			if in.IsNull() {
				in.Skip()
				out.AssignedBy = nil
			} else {
				if out.AssignedBy == nil {
					out.AssignedBy = new(string)
				}
				*out.AssignedBy = string(in.String())
			}
		case "type":
			out.Type = string(in.StringIntern())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode10(out *jwriter.Writer, in struct {
	AssignedBy *string    `json:"assigned_by"`
	Type       string     `json:"type,intern"`
	CreatedAt  coral.Time `json:"created_at"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"assigned_by\":"
		out.RawString(prefix[1:])
		if in.AssignedBy == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.AssignedBy))
		}
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy9(in *jlexer.Lexer, out *Asset) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterCommonCoral(in, &out.MongoID)
		case "id":
			out.ID = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "closedAt":
			if in.IsNull() {
				in.Skip()
				out.ClosedAt = nil
			} else {
				if out.ClosedAt == nil {
					out.ClosedAt = new(coral.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ClosedAt).UnmarshalJSON(data))
				}
			}
		case "closedMessage":
			if in.IsNull() {
				in.Skip()
				out.ClosedMessage = nil
			} else {
				if out.ClosedMessage == nil {
					out.ClosedMessage = new(string)
				}
				*out.ClosedMessage = string(in.String())
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		case "scraped":
			if in.IsNull() {
				in.Skip()
				out.Scraped = nil
			} else {
				if out.Scraped == nil {
					out.Scraped = new(coral.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Scraped).UnmarshalJSON(data))
				}
			}
		case "metadata":
			if m, ok := out.Metadata.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Metadata.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Metadata = in.Interface()
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(string)
				}
				*out.Author = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "image":
			if in.IsNull() {
				in.Skip()
				out.Image = nil
			} else {
				if out.Image == nil {
					out.Image = new(string)
				}
				*out.Image = string(in.String())
			}
		case "section":
			if in.IsNull() {
				in.Skip()
				out.Section = nil
			} else {
				if out.Section == nil {
					out.Section = new(string)
				}
				*out.Section = string(in.String())
			}
		case "settings":
			easyjsonD2b7633eDecode13(in, &out.Settings)
		case "modified_date":
			if in.IsNull() {
				in.Skip()
				out.ModifiedDate = nil
			} else {
				if out.ModifiedDate == nil {
					out.ModifiedDate = new(coral.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ModifiedDate).UnmarshalJSON(data))
				}
			}
		case "publication_date":
			if in.IsNull() {
				in.Skip()
				out.PublicationDate = nil
			} else {
				if out.PublicationDate == nil {
					out.PublicationDate = new(coral.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PublicationDate).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy9(out *jwriter.Writer, in Asset) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterCommonCoral(out, in.MongoID)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"closedAt\":"
		out.RawString(prefix)
		if in.ClosedAt == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ClosedAt).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"closedMessage\":"
		out.RawString(prefix)
		if in.ClosedMessage == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ClosedMessage))
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"scraped\":"
		out.RawString(prefix)
		if in.Scraped == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Scraped).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		if m, ok := in.Metadata.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Metadata.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Metadata))
		}
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		if in.Title == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Title))
		}
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		if in.Author == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Author))
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Description))
		}
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		if in.Image == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Image))
		}
	}
	{
		const prefix string = ",\"section\":"
		out.RawString(prefix)
		if in.Section == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Section))
		}
	}
	{
		const prefix string = ",\"settings\":"
		out.RawString(prefix)
		easyjsonD2b7633eEncode13(out, in.Settings)
	}
	{
		const prefix string = ",\"modified_date\":"
		out.RawString(prefix)
		if in.ModifiedDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ModifiedDate).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"publication_date\":"
		out.RawString(prefix)
		if in.PublicationDate == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PublicationDate).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Asset) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Asset) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Asset) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Asset) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy9(l, v)
}
func easyjsonD2b7633eDecode13(in *jlexer.Lexer, out *struct {
	Moderation         *string `json:"moderation,omitempty"`
	QuestionBoxContent *string `json:"questionBoxContent,omitempty"`
	QuestionBoxEnable  *bool   `json:"questionBoxEnable,omitempty"`
	QuestionBoxIcon    *string `json:"questionBoxIcon,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "moderation":
			if in.IsNull() {
				in.Skip()
				out.Moderation = nil
			} else {
				if out.Moderation == nil {
					out.Moderation = new(string)
				}
				*out.Moderation = string(in.String())
			}
		case "questionBoxContent":
			if in.IsNull() {
				in.Skip()
				out.QuestionBoxContent = nil
			} else {
				if out.QuestionBoxContent == nil {
					out.QuestionBoxContent = new(string)
				}
				*out.QuestionBoxContent = string(in.String())
			}
		case "questionBoxEnable":
			if in.IsNull() {
				in.Skip()
				out.QuestionBoxEnable = nil
			} else {
				if out.QuestionBoxEnable == nil {
					out.QuestionBoxEnable = new(bool)
				}
				*out.QuestionBoxEnable = bool(in.Bool())
			}
		case "questionBoxIcon":
			if in.IsNull() {
				in.Skip()
				out.QuestionBoxIcon = nil
			} else {
				if out.QuestionBoxIcon == nil {
					out.QuestionBoxIcon = new(string)
				}
				*out.QuestionBoxIcon = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncode13(out *jwriter.Writer, in struct {
	Moderation         *string `json:"moderation,omitempty"`
	QuestionBoxContent *string `json:"questionBoxContent,omitempty"`
	QuestionBoxEnable  *bool   `json:"questionBoxEnable,omitempty"`
	QuestionBoxIcon    *string `json:"questionBoxIcon,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Moderation != nil {
		const prefix string = ",\"moderation\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.Moderation))
	}
	if in.QuestionBoxContent != nil {
		const prefix string = ",\"questionBoxContent\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.QuestionBoxContent))
	}
	if in.QuestionBoxEnable != nil {
		const prefix string = ",\"questionBoxEnable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.QuestionBoxEnable))
	}
	if in.QuestionBoxIcon != nil {
		const prefix string = ",\"questionBoxIcon\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.QuestionBoxIcon))
	}
	out.RawByte('}')
}
func easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy10(in *jlexer.Lexer, out *Action) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_id":
			easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterCommonCoral(in, &out.MongoID)
		case "id":
			out.ID = string(in.String())
		case "action_type":
			out.ActionType = string(in.StringIntern())
		case "group_id":
			out.GroupID = string(in.StringIntern())
		case "item_id":
			out.ItemID = string(in.String())
		case "item_type":
			out.ItemType = string(in.StringIntern())
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(string)
				}
				*out.UserID = string(in.String())
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Metadata = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v33 interface{}
					if m, ok := v33.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v33.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v33 = in.Interface()
					}
					(out.Metadata)[key] = v33
					in.WantComma()
				}
				in.Delim('}')
			}
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy10(out *jwriter.Writer, in Action) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_id\":"
		out.RawString(prefix[1:])
		easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterCommonCoral(out, in.MongoID)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"action_type\":"
		out.RawString(prefix)
		out.String(string(in.ActionType))
	}
	{
		const prefix string = ",\"group_id\":"
		out.RawString(prefix)
		out.String(string(in.GroupID))
	}
	{
		const prefix string = ",\"item_id\":"
		out.RawString(prefix)
		out.String(string(in.ItemID))
	}
	{
		const prefix string = ",\"item_type\":"
		out.RawString(prefix)
		out.String(string(in.ItemType))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		if in.UserID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.UserID))
		}
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		if in.Metadata == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v34First := true
			for v34Name, v34Value := range in.Metadata {
				if v34First {
					v34First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v34Name))
				out.RawByte(':')
				if m, ok := v34Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v34Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v34Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Action) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Action) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComCoralprojectCoralImporterStrategiesLegacy10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Action) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Action) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComCoralprojectCoralImporterStrategiesLegacy10(l, v)
}
